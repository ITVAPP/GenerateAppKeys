name: Generate App Store Keys

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: Create keys directory
        run: mkdir -p keys
          
      - name: Generate Android Keystore
        run: |
          cd keys
          
          # 生成 Google Play 发布证书
          keytool -genkey -v \
            -keystore android_keystore.jks \
            -storepass iappplayer2024 \
            -alias upload \
            -keypass iappplayer2024 \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10950 \
            -dname "CN=ITVAPP, OU=Mobile Development, O=ITVAPP, L=Beijing, ST=Beijing, C=CN" \
            -noprompt
          
          # 创建 Android key.properties（用于 example/android 目录）
          cat > android_key.properties << EOF
          storePassword=iappplayer2024
          keyPassword=iappplayer2024
          keyAlias=upload
          storeFile=../../keys/android_keystore.jks
          EOF
          
          # 显示 Android 证书信息
          echo "=== Android 证书信息 ==="
          keytool -list -v -keystore android_keystore.jks -storepass iappplayer2024 | grep -E "Alias|Owner|Valid" || true
          
      - name: Generate iOS Development Files
        run: |
          cd keys
          
          # 创建 iOS 开发说明文件
          cat > ios_certificates_guide.md << 'EOF'
          # iOS App Store 发布指南
          
          ## 需要的证书和文件
          
          1. **Apple Developer 账号** (必需)
             - 访问 https://developer.apple.com
             - 年费 $99 USD
          
          2. **需要创建的证书**：
             - iOS Distribution Certificate (发布证书)
             - Provisioning Profile (配置文件)
          
          ## 创建步骤
          
          ### 1. 创建 App ID
          1. 登录 Apple Developer
          2. 进入 Certificates, Identifiers & Profiles
          3. 点击 Identifiers → + 按钮
          4. 选择 App IDs → Continue
          5. 输入：
             - Description: IAppPlayer
             - Bundle ID: net.itvapp.iapp_player_example
          6. 选择需要的 Capabilities
          7. Register
          
          ### 2. 创建发布证书
          1. 点击 Certificates → + 按钮
          2. 选择 iOS Distribution → Continue
          3. 按照指示创建 CSR 文件
          4. 上传 CSR 文件
          5. 下载证书 (.cer 文件)
          
          ### 3. 创建 Provisioning Profile
          1. 点击 Profiles → + 按钮
          2. 选择 App Store → Continue
          3. 选择你的 App ID
          4. 选择你的发布证书
          5. 命名为 "IAppPlayer Distribution"
          6. 下载 .mobileprovision 文件
          
          ### 4. 导出 p12 文件
          1. 双击安装下载的 .cer 文件
          2. 打开 Keychain Access (钥匙串访问)
          3. 找到你的证书
          4. 右键 → Export
          5. 保存为 .p12 格式
          6. 设置密码 (建议: iappplayer2024)
          
          ## 文件放置位置
          
          将以下文件放入 keys 目录：
          - `ios_distribution.p12` - 发布证书
          - `IAppPlayer_Distribution.mobileprovision` - 配置文件
          
          ## 在 GitHub Actions 中使用
          
          1. 将 p12 文件转为 base64:
             ```bash
             base64 -w 0 ios_distribution.p12 > ios_p12_base64.txt
             ```
          
          2. 将 mobileprovision 转为 base64:
             ```bash
             base64 -w 0 IAppPlayer_Distribution.mobileprovision > ios_provision_base64.txt
             ```
          
          3. 在 GitHub Secrets 中添加：
             - IOS_P12_BASE64
             - IOS_P12_PASSWORD
             - IOS_PROVISION_BASE64
             - IOS_TEAM_ID
          EOF
          
          # 创建示例 ExportOptions.plist
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>YOUR_TEAM_ID</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>net.itvapp.iapp_player_example</key>
                  <string>IAppPlayer Distribution</string>
              </dict>
          </dict>
          </plist>
          EOF
          
          # 创建使用说明
          cat > README.md << 'EOF'
          # 证书使用说明
          
          ## Android
          
          - 证书文件: `android_keystore.jks`
          - 配置文件: `android_key.properties`
          - 密码: iappplayer2024
          - 别名: upload
          
          使用方法：
          1. 确保 `keys/android_keystore.jks` 文件存在
          2. 将 `keys/android_key.properties` 复制到 `example/android/key.properties`
          
          或在 `example/android/key.properties` 中使用：
          ```
          storePassword=iappplayer2024
          keyPassword=iappplayer2024
          keyAlias=upload
          storeFile=../../keys/android_keystore.jks
          ```
          
          ## iOS
          
          请查看 `ios_certificates_guide.md` 了解如何创建 iOS 证书。
          
          iOS 证书需要 Apple Developer 账号手动创建，无法自动生成。
          
          ## 安全提醒
          
          **重要**：
          - 这些证书文件非常重要，请妥善保管
          - 不要将证书密码提交到公开仓库
          - 建议使用 GitHub Secrets 存储敏感信息
          - Android 证书一旦丢失，将无法更新 Google Play 上的应用
          - 生成后请立即备份 keys 目录到安全位置
          EOF
          
      - name: Display generated files
        run: |
          echo "=== 生成的文件 ==="
          ls -la keys/
          echo ""
          echo "=== 生成完成 ==="
          echo "✅ Android 证书已生成: keys/android_keystore.jks"
          echo "✅ Android 配置已生成: keys/android_key.properties"
          echo "✅ iOS 指南已生成: keys/ios_certificates_guide.md"
          echo "✅ 使用说明已生成: keys/README.md"
          echo ""
          echo "⚠️  iOS 证书需要 Apple Developer 账号手动创建"
          
      - name: Commit keys directory
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add keys/
          git diff --staged --quiet || git commit -m "Add app store keys and guides [skip ci]"
          git push || echo "No changes to push"
          
      - name: Upload keys as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-store-keys
          path: keys/
          retention-days: 90
