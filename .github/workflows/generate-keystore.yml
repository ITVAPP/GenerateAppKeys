name: Generate Custom App Store Keys

on:
  workflow_dispatch:
    inputs:
      keystore_name:
        description: '证书名称（将作为目录名）'
        required: false
        default: 'iappplayer'
        type: string
      keystore_password:
        description: '密钥库密码'
        required: false
        default: 'iappplayer2024'
        type: string
      key_alias:
        description: '密钥别名'
        required: false
        default: 'upload'
        type: string
      organization:
        description: '组织名称'
        required: false
        default: 'ITVAPP'
        type: string

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: Set parameters
        id: params
        run: |
          # 使用输入值或默认值
          KEYSTORE_NAME="${{ github.event.inputs.keystore_name }}"
          KEYSTORE_PASSWORD="${{ github.event.inputs.keystore_password }}"
          KEY_ALIAS="${{ github.event.inputs.key_alias }}"
          ORGANIZATION="${{ github.event.inputs.organization }}"
          
          # 如果为空，使用默认值
          KEYSTORE_NAME=${KEYSTORE_NAME:-iappplayer}
          KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD:-iappplayer2024}
          KEY_ALIAS=${KEY_ALIAS:-upload}
          ORGANIZATION=${ORGANIZATION:-ITVAPP}
          
          # 验证证书名只包含字母、数字、连字符和下划线
          if ! [[ "$KEYSTORE_NAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "❌ 错误：证书名只能包含字母、数字、连字符和下划线"
            exit 1
          fi
          
          # 输出参数
          echo "keystore_name=$KEYSTORE_NAME" >> $GITHUB_OUTPUT
          echo "keystore_password=$KEYSTORE_PASSWORD" >> $GITHUB_OUTPUT
          echo "key_alias=$KEY_ALIAS" >> $GITHUB_OUTPUT
          echo "organization=$ORGANIZATION" >> $GITHUB_OUTPUT
          echo "keystore_dir=keys/$KEYSTORE_NAME" >> $GITHUB_OUTPUT
          echo "keystore_file=${KEYSTORE_NAME}_keystore.jks" >> $GITHUB_OUTPUT
          
          # 显示参数
          echo "=== 使用以下参数 ==="
          echo "📁 证书目录: keys/$KEYSTORE_NAME"
          echo "🔑 证书文件: ${KEYSTORE_NAME}_keystore.jks"
          echo "🏢 组织名称: $ORGANIZATION"
          echo "📝 密钥别名: $KEY_ALIAS"
          echo "🔒 密钥密码: ****$(echo $KEYSTORE_PASSWORD | tail -c 5)"
      
      - name: Create certificate directory
        run: |
          KEYSTORE_DIR="${{ steps.params.outputs.keystore_dir }}"
          
          # 如果目录已存在，删除并重建
          if [ -d "$KEYSTORE_DIR" ]; then
            echo "⚠️  目录 $KEYSTORE_DIR 已存在，将覆盖..."
            rm -rf "$KEYSTORE_DIR"
          fi
          
          mkdir -p "$KEYSTORE_DIR"
          echo "✅ 创建目录: $KEYSTORE_DIR"
          
      - name: Generate Android Keystore
        run: |
          cd "${{ steps.params.outputs.keystore_dir }}"
          
          KEYSTORE_FILE="${{ steps.params.outputs.keystore_file }}"
          KEYSTORE_PASSWORD="${{ steps.params.outputs.keystore_password }}"
          KEY_ALIAS="${{ steps.params.outputs.key_alias }}"
          ORGANIZATION="${{ steps.params.outputs.organization }}"
          
          # 生成证书
          keytool -genkey -v \
            -keystore "$KEYSTORE_FILE" \
            -storepass "$KEYSTORE_PASSWORD" \
            -alias "$KEY_ALIAS" \
            -keypass "$KEYSTORE_PASSWORD" \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10950 \
            -dname "CN=$ORGANIZATION, OU=Mobile Development, O=$ORGANIZATION, L=Beijing, ST=Beijing, C=CN" \
            -noprompt
          
          echo "✅ 证书生成成功: $KEYSTORE_FILE"
          
          # 显示证书信息
          echo ""
          echo "=== 证书信息 ==="
          keytool -list -v -keystore "$KEYSTORE_FILE" -storepass "$KEYSTORE_PASSWORD" | grep -E "Alias|Owner|Valid" || true
          
          # 生成 Base64
          echo ""
          echo "=== 生成 Base64 编码 ==="
          base64 -w 0 "$KEYSTORE_FILE" > "${KEYSTORE_FILE%.jks}_base64.txt"
          echo "✅ Base64 文件: ${KEYSTORE_FILE%.jks}_base64.txt"
          
      - name: Generate configuration files
        run: |
          cd "${{ steps.params.outputs.keystore_dir }}"
          
          KEYSTORE_NAME="${{ steps.params.outputs.keystore_name }}"
          KEYSTORE_FILE="${{ steps.params.outputs.keystore_file }}"
          KEYSTORE_PASSWORD="${{ steps.params.outputs.keystore_password }}"
          KEY_ALIAS="${{ steps.params.outputs.key_alias }}"
          
          # 创建 key.properties
          cat > key.properties << EOF
          storePassword=$KEYSTORE_PASSWORD
          keyPassword=$KEYSTORE_PASSWORD
          keyAlias=$KEY_ALIAS
          storeFile=../../keys/$KEYSTORE_NAME/$KEYSTORE_FILE
          EOF
          
          # 创建 GitHub Secrets 设置说明
          cat > github_secrets_setup.md << EOF
          # GitHub Secrets 设置指南 - $KEYSTORE_NAME
          
          ## 设置步骤
          
          1. **进入仓库设置**
             - 打开你的 GitHub 仓库
             - 点击 **Settings** (设置)
             - 左侧菜单选择 **Secrets and variables** → **Actions**
          
          2. **添加以下 Secrets**
             
             点击 **New repository secret** 按钮，逐个添加：
             
             ### 选项 A：使用默认名称
             - **KEYSTORE_BASE64**: 复制 \`${KEYSTORE_FILE%.jks}_base64.txt\` 的内容
             - **KEYSTORE_PASSWORD**: \`$KEYSTORE_PASSWORD\`
             - **KEY_ALIAS**: \`$KEY_ALIAS\`
             
             ### 选项 B：使用自定义名称（多证书场景）
             - **${KEYSTORE_NAME^^}_KEYSTORE_BASE64**: 复制 \`${KEYSTORE_FILE%.jks}_base64.txt\` 的内容
             - **${KEYSTORE_NAME^^}_KEYSTORE_PASSWORD**: \`$KEYSTORE_PASSWORD\`
             - **${KEYSTORE_NAME^^}_KEY_ALIAS**: \`$KEY_ALIAS\`
          
          ## 在 GitHub Actions 中使用
          
          \`\`\`yaml
          - name: Setup signing for $KEYSTORE_NAME
            env:
              KEYSTORE_BASE64: \${{ secrets.KEYSTORE_BASE64 }}
              KEYSTORE_PASSWORD: \${{ secrets.KEYSTORE_PASSWORD }}
              KEY_ALIAS: \${{ secrets.KEY_ALIAS }}
            run: |
              cd example/android
              
              # 解码密钥库
              echo "\$KEYSTORE_BASE64" | base64 --decode > app/$KEYSTORE_FILE
              
              # 创建 key.properties
              cat > key.properties << PROPS
              storePassword=\$KEYSTORE_PASSWORD
              keyPassword=\$KEYSTORE_PASSWORD
              keyAlias=\$KEY_ALIAS
              storeFile=$KEYSTORE_FILE
              PROPS
          \`\`\`
          EOF
          
          # 创建 README
          cat > README.md << EOF
          # $KEYSTORE_NAME 证书使用说明
          
          ## 证书信息
          
          - **证书文件**: \`$KEYSTORE_FILE\`
          - **密钥库密码**: \`$KEYSTORE_PASSWORD\`
          - **密钥密码**: \`$KEYSTORE_PASSWORD\`
          - **密钥别名**: \`$KEY_ALIAS\`
          - **组织**: \`${{ steps.params.outputs.organization }}\`
          - **有效期**: 30 年
          - **创建时间**: $(date '+%Y-%m-%d %H:%M:%S')
          
          ## 文件说明
          
          - \`$KEYSTORE_FILE\` - Android 发布证书
          - \`key.properties\` - Android 签名配置
          - \`${KEYSTORE_FILE%.jks}_base64.txt\` - 证书的 Base64 编码
          - \`github_secrets_setup.md\` - GitHub Secrets 设置指南
          
          ## 使用方法
          
          ### 本地使用
          1. 将此目录复制到项目中
          2. 在 \`example/android/key.properties\` 中配置路径
          
          ### GitHub Actions 使用
          1. 查看 \`github_secrets_setup.md\`
          2. 设置相应的 Secrets
          3. 在工作流中使用
          
          ## 安全提醒
          
          - 🔒 这是生产证书，请妥善保管
          - 🔒 不要删除或丢失此证书
          - 🔒 所有应用更新都需要使用相同的证书
          - ⚠️  建议立即备份到安全位置
          EOF
          
          echo "✅ 配置文件生成完成"
          
      - name: Create master keys directory structure
        run: |
          # 确保 keys 根目录存在
          mkdir -p keys
          
          # 创建总览 README
          cat > keys/README.md << 'EOF'
          # 证书目录
          
          此目录包含所有生成的应用证书。每个子目录对应一个不同的证书配置。
          
          ## 目录结构
          
          ```
          keys/
          ├── README.md (此文件)
          └── [证书名称]/
              ├── [证书名称]_keystore.jks
              ├── [证书名称]_keystore_base64.txt
              ├── key.properties
              ├── github_secrets_setup.md
              └── README.md
          ```
          
          ## 使用指南
          
          1. 选择对应的证书目录
          2. 查看该目录下的 README.md
          3. 按照说明配置项目
          
          ## 安全提醒
          
          ⚠️  请勿将包含 base64 的文件提交到版本控制
          🔒 定期备份所有证书到安全位置
          EOF
          
      - name: Display summary
        run: |
          KEYSTORE_DIR="${{ steps.params.outputs.keystore_dir }}"
          KEYSTORE_NAME="${{ steps.params.outputs.keystore_name }}"
          
          echo ""
          echo "=== 🎉 证书生成完成 ==="
          echo ""
          echo "📁 证书位置: $KEYSTORE_DIR"
          echo ""
          echo "📋 生成的文件:"
          ls -la "$KEYSTORE_DIR" | grep -E "\.(jks|txt|md|properties)$"
          echo ""
          echo "🔐 GitHub Secrets 名称建议:"
          echo "   - ${KEYSTORE_NAME^^}_KEYSTORE_BASE64"
          echo "   - ${KEYSTORE_NAME^^}_KEYSTORE_PASSWORD"
          echo "   - ${KEYSTORE_NAME^^}_KEY_ALIAS"
          echo ""
          echo "📥 下载 artifacts 获取所有文件"
          
      - name: Commit changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 添加 .gitignore
          echo "*_base64.txt" > "${{ steps.params.outputs.keystore_dir }}/.gitignore"
          
          git add keys/
          git diff --staged --quiet || git commit -m "Add ${{ steps.params.outputs.keystore_name }} keystore [skip ci]"
          git push || echo "No changes to push"
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.params.outputs.keystore_name }}-keystore
          path: ${{ steps.params.outputs.keystore_dir }}
          retention-days: 90
