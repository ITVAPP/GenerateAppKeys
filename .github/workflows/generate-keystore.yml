name: Generate App Store Keys

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      
      - name: Create keys directory
        run: mkdir -p keys
          
      - name: Generate Android Keystore
        run: |
          cd keys
          
          # 生成 Google Play 发布证书
          keytool -genkey -v \
            -keystore android_keystore.jks \
            -storepass iappplayer2024 \
            -alias upload \
            -keypass iappplayer2024 \
            -keyalg RSA \
            -keysize 2048 \
            -validity 10950 \
            -dname "CN=ITVAPP, OU=Mobile Development, O=ITVAPP, L=Beijing, ST=Beijing, C=CN" \
            -noprompt
          
          # 创建 Android key.properties（用于 example/android 目录）
          cat > android_key.properties << EOF
          storePassword=iappplayer2024
          keyPassword=iappplayer2024
          keyAlias=upload
          storeFile=../../keys/android_keystore.jks
          EOF
          
          # 显示 Android 证书信息
          echo "=== Android 证书信息 ==="
          keytool -list -v -keystore android_keystore.jks -storepass iappplayer2024 | grep -E "Alias|Owner|Valid" || true
          
          # 生成 base64 编码
          echo ""
          echo "=== 生成 Base64 编码 ==="
          base64 -w 0 android_keystore.jks > android_keystore_base64.txt
          echo "✅ Base64 编码已保存到: android_keystore_base64.txt"
          
          # 创建 GitHub Secrets 设置说明
          cat > github_secrets_setup.md << 'EOF'
          # GitHub Secrets 设置指南
          
          ## 设置步骤
          
          1. **进入仓库设置**
             - 打开你的 GitHub 仓库
             - 点击 **Settings** (设置)
             - 左侧菜单选择 **Secrets and variables** → **Actions**
          
          2. **添加以下 Secrets**
             
             点击 **New repository secret** 按钮，逐个添加：
             
             ### KEYSTORE_BASE64
             - **Name**: `KEYSTORE_BASE64`
             - **Value**: 复制 `android_keystore_base64.txt` 文件的全部内容
             
             ### KEYSTORE_PASSWORD
             - **Name**: `KEYSTORE_PASSWORD`
             - **Value**: `iappplayer2024`
             
             ### KEY_ALIAS
             - **Name**: `KEY_ALIAS`
             - **Value**: `upload`
          
          ## 在 GitHub Actions 中使用
          
          在你的构建工作流中添加以下步骤：
          
          ```yaml
          - name: Setup signing
            env:
              KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
              KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
              KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
            run: |
              cd example/android
              
              # 解码密钥库
              echo "$KEYSTORE_BASE64" | base64 --decode > app/release.keystore
              
              # 创建 key.properties
              cat > key.properties << EOF
              storePassword=$KEYSTORE_PASSWORD
              keyPassword=$KEYSTORE_PASSWORD
              keyAlias=$KEY_ALIAS
              storeFile=release.keystore
              EOF
          ```
          
          ## 安全提醒
          
          - ✅ Secrets 是加密存储的，只有 Actions 可以访问
          - ✅ Secrets 不会在日志中显示
          - ❌ 不要在代码中硬编码密码
          - ❌ 不要将 base64 文件提交到仓库
          
          ## 快速复制命令
          
          复制 base64 内容到剪贴板：
          
          **Windows (PowerShell)**:
          ```powershell
          Get-Content android_keystore_base64.txt | Set-Clipboard
          ```
          
          **macOS**:
          ```bash
          cat android_keystore_base64.txt | pbcopy
          ```
          
          **Linux**:
          ```bash
          cat android_keystore_base64.txt | xclip -selection clipboard
          ```
          EOF
          
      - name: Generate iOS Development Files
        run: |
          cd keys
          
          # 创建 iOS 开发说明文件
          cat > ios_certificates_guide.md << 'EOF'
          # iOS App Store 发布指南
          
          ## 需要的证书和文件
          
          1. **Apple Developer 账号** (必需)
             - 访问 https://developer.apple.com
             - 年费 $99 USD
          
          2. **需要创建的证书**：
             - iOS Distribution Certificate (发布证书)
             - Provisioning Profile (配置文件)
          
          ## 创建步骤
          
          ### 1. 创建 App ID
          1. 登录 Apple Developer
          2. 进入 Certificates, Identifiers & Profiles
          3. 点击 Identifiers → + 按钮
          4. 选择 App IDs → Continue
          5. 输入：
             - Description: IAppPlayer
             - Bundle ID: net.itvapp.iapp_player_example
          6. 选择需要的 Capabilities
          7. Register
          
          ### 2. 创建发布证书
          1. 点击 Certificates → + 按钮
          2. 选择 iOS Distribution → Continue
          3. 按照指示创建 CSR 文件
          4. 上传 CSR 文件
          5. 下载证书 (.cer 文件)
          
          ### 3. 创建 Provisioning Profile
          1. 点击 Profiles → + 按钮
          2. 选择 App Store → Continue
          3. 选择你的 App ID
          4. 选择你的发布证书
          5. 命名为 "IAppPlayer Distribution"
          6. 下载 .mobileprovision 文件
          
          ### 4. 导出 p12 文件
          1. 双击安装下载的 .cer 文件
          2. 打开 Keychain Access (钥匙串访问)
          3. 找到你的证书
          4. 右键 → Export
          5. 保存为 .p12 格式
          6. 设置密码 (建议: iappplayer2024)
          
          ## 文件放置位置
          
          将以下文件放入 keys 目录：
          - `ios_distribution.p12` - 发布证书
          - `IAppPlayer_Distribution.mobileprovision` - 配置文件
          
          ## 在 GitHub Actions 中使用
          
          1. 将 p12 文件转为 base64:
             ```bash
             base64 -w 0 ios_distribution.p12 > ios_p12_base64.txt
             ```
          
          2. 将 mobileprovision 转为 base64:
             ```bash
             base64 -w 0 IAppPlayer_Distribution.mobileprovision > ios_provision_base64.txt
             ```
          
          3. 在 GitHub Secrets 中添加：
             - IOS_P12_BASE64
             - IOS_P12_PASSWORD
             - IOS_PROVISION_BASE64
             - IOS_TEAM_ID
          EOF
          
          # 创建示例 ExportOptions.plist
          cat > ExportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>YOUR_TEAM_ID</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>signingStyle</key>
              <string>manual</string>
              <key>signingCertificate</key>
              <string>Apple Distribution</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>net.itvapp.iapp_player_example</key>
                  <string>IAppPlayer Distribution</string>
              </dict>
          </dict>
          </plist>
          EOF
          
          # 创建使用说明
          cat > README.md << 'EOF'
          # 证书使用说明
          
          ## 生成的文件
          
          - `android_keystore.jks` - Android 发布证书
          - `android_key.properties` - Android 签名配置
          - `android_keystore_base64.txt` - 证书的 Base64 编码（用于 GitHub Secrets）
          - `github_secrets_setup.md` - GitHub Secrets 详细设置指南
          - `ios_certificates_guide.md` - iOS 证书创建指南
          - `ExportOptions.plist` - iOS 导出配置模板
          
          ## Android 快速开始
          
          ### 方式一：本地使用
          1. 将 `android_keystore.jks` 复制到 `example/android/keys/`
          2. 在 `example/android/key.properties` 中配置：
             ```
             storePassword=iappplayer2024
             keyPassword=iappplayer2024
             keyAlias=upload
             storeFile=../../keys/android_keystore.jks
             ```
          
          ### 方式二：GitHub Actions 使用
          1. 查看 `github_secrets_setup.md` 文件
          2. 按照指南设置 GitHub Secrets
          3. 在工作流中使用 Secrets 自动签名
          
          ## 证书信息
          
          - **密钥库密码**: iappplayer2024
          - **密钥密码**: iappplayer2024
          - **密钥别名**: upload
          - **有效期**: 30 年
          - **适用于**: Google Play 发布
          
          ## iOS
          
          iOS 证书需要 Apple Developer 账号手动创建。
          详细步骤请查看 `ios_certificates_guide.md`。
          
          ## 安全提醒
          
          **重要**：
          - 🔒 妥善保管 `android_keystore.jks`，丢失后无法恢复
          - 🔒 不要将证书文件提交到公开仓库
          - 🔒 使用 GitHub Secrets 存储敏感信息
          - 🔒 定期备份证书文件到安全位置
          - ⚠️  所有 Google Play 更新都需要使用相同的证书
          EOF
          
      - name: Display generated files
        run: |
          echo "=== 生成的文件 ==="
          ls -la keys/
          echo ""
          echo "=== 生成完成 ==="
          echo "✅ Android 证书已生成: keys/android_keystore.jks"
          echo "✅ Android 配置已生成: keys/android_key.properties"
          echo "✅ Base64 编码已生成: keys/android_keystore_base64.txt"
          echo "✅ GitHub Secrets 设置指南: keys/github_secrets_setup.md"
          echo "✅ iOS 指南已生成: keys/ios_certificates_guide.md"
          echo "✅ 使用说明已生成: keys/README.md"
          echo ""
          echo "📋 下一步："
          echo "1. 下载 app-store-keys 压缩包"
          echo "2. 查看 github_secrets_setup.md 设置 GitHub Secrets"
          echo "3. 将 base64 内容添加到 GitHub Secrets"
          echo ""
          echo "⚠️  iOS 证书需要 Apple Developer 账号手动创建"
          
      - name: Commit keys directory
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # 创建 .gitignore 防止提交 base64 文件
          echo "android_keystore_base64.txt" > keys/.gitignore
          
          git add keys/
          git diff --staged --quiet || git commit -m "Add app store keys and guides [skip ci]"
          git push || echo "No changes to push"
          
      - name: Upload keys as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-store-keys
          path: keys/
          retention-days: 90
